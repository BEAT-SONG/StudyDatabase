2022년 2월 14일 월요일

<<데이터베이스 개요>>
- 쿼리(규칙)이 정해져 있음
- 데이터 베이스 = 파일(file), 엑셀(exel) etc
- 데이터를 담아두는 곳 = 데이터 베이스
- 조금 더 쉽게 관리하기 위해서 데이터 시스템을 만들기 시작 
  = oracle, mysql, 메모리 기반의 데이터 베이스 etc
- 파일에 공유의 개념을 추가해왔다고 생각하면 될듯 = 데이터 베이스
- DBME = 데이터 베이스 메니지먼트
- 데이터 베이스 = 바뀌지 않는 것
- "ICBM" = IoT Cloud Big data Mobile (Securite) => AI 
- IoT + Mobile = smart phone, watch etc
- Big data => Cloud service 

<Big data>
- 좋은 장비가 있으나 내부적으로 정확히 정의되지 않은 느낌
- 플랫폼을 분리되어 있는 형태로 사업을 진행해왔지만, Big data는 전체적으로 연동되어 있어야 함
- 정의 = "데이터를 관리하는 ('메모리')공간"
- 결측치, 이상치 데이터를 확인해서 필터링(전처리=정제, 가공, 저장)

<데이터베이스>
- 웹에서 주로 데이터를 입력, 수정, 선택을 한다.
- 여러 칼럼으로 이루어진 것 = 테이블, 각각을 관리하는 것 = 테이블, 테이블 전체를 관리하는 것 = DBMS(데이터 베이스 관리 시스템)

<DBMS의 제공 기능>
- 질의(Qurey, 쿼리) 처리 => "slecet", insert, update, delete
- 데이터 베이스 정의, 갱신
- 유지보수
- 보안

<주로 사용되는 DBMS>
- 오라클사 = Oracle, "My SQL" = 어디든 최적화 가능
- 마이크로소프트사 = MS SQL = Window에서만 최적화 됨, 거의 안 씀
- 기타 = DB2, Sybase, Informix, Sqlite(폰에도 들어갈 만큼 가벼움, 작은 소프트웨어라고 생각하면 됨), "Maria DB" etc

+ OS= Window(윈도우, 보안에 취약함), LINUX(리눅스), MAC(맥)

<DBMS의 장점>
- 데이터의 중복과 불일치 감소 => 통합관리(한군데에서 관리)에 따른 결과
- 데이터 보완 => 회사의 중요자료 접근권한 설정
- 질의 처리에 효율적인 저장 구조 => 사용자(개발자, 일반 사용자)는 질의로 접근
- 백업(Backup)과 복구(Recovery) => 백업 정책 수립 가능
- 다양한 인터페이스 => 사용자의 역할에 맞는 UI제공 가능
- 일관된 데이터를 유지 => 데이터의 정확성과 유효성을 갖음

<DBMS의 단점>
- 흔히 프로그램이 무겁다 = 사용하는 자원이 많음
-- 오라클은 사용하지 않을 경우 수동으로 정지해 둬라..
- 구조가 복잡함
- 자원이 많고 구조가 복잡할 수록 비쌈
- 오버헤드(자원의 충돌)로 실시간성이 떨어질 경우 사용하지 말자

<데이터베이스 스키마(Schema)>
- 데이터베이스의 구조와 제약조건에 대해서 분명하고 자세하게 기술한 것
- str()

+ DB, DBMS, RDBMS
DB = 개념
DBMS = System, 각각의 데이터 공간
RDBMS = System, 각각의 데이터 공간에 관계를 만들어서 연관지어둔 것

<데이터베이스 상태>
- 입력, 수정, 삭제가 주로 수행된다

<데이터베이스 언어>
- 데이터 정의어(DDL) = 데이터베이스 관리자 + 설계자 사용(구조 및 관계 설정)
- 데이터 조작어(DML) = 데이터베이스 사용자가 데이터에 접근하기 위한 언어 정의
- 데이터 제어어(DCL) = 데이터 베이스 관리자가 사용

<데이터베이스 사용자>
- 데이터베이스 관리자(DBA)
- 데이터베이스 설계자(DD) = 요구사항을 분석하여 개념적/물리적 스키마의 설계 책임자
- 최종 사용자(EU) = 보통 데이터의 입력, 수정, 삭제, 조회에 대한 질의 요청자(나)
- 시스템 분석가 / 응용 프로그램 개발자 = 보통 데이터의 입력, 수정, 삭제, 조회에 대한 질의 요청자(나)

<데이터베이스 단위>
-  컬럼=변수=행=세로

<데이터베이스 추상화>
- 데이터베이스 관리 시스템의 주된 역할은
-> 사용자에게 데이터에 대한 추상적인 뷰(View)를 제공
-> 데이터가 어떻게 저장되고 유지되는지는 숨겨도 무방

- 3계층 스키마 아키텍쳐
-> 사용자의 응용프로그램과 물리적 데이터베이스를 분리시키는 것이 주 목적이다

+계층(T)
2T = 서버, 클라이언트 / 개발자 사용자
3T = 서버, 클라이언트, 응용프로그램(Webs) / 일반 사용자
MT = 서버, 클라이언트, 여러개의 응용프로그램

<SQL>
- 사용자, 관리자, 설계자 등과 데이터베이스 간의 대화에 필요한 '소통 언어'를 의미

+ 흐름
서버 = Oracle / 대기 -> 처리 -> 응답 / 
클라이언트 = SQLD(Tool) + 개발자(SQL이라는 언어를 사용) / 질의(요청) / 출력(보여주기) 
SQL = insert(입력), update(수정), delete(삭제), select(조회/검색) = 데이터 조작어(DML)

+ 데이터 정의어(DDL) = create(생성), alter(수정), drop(삭제) = 메모리(공간) 형태의 조작

<table>
- 여러 종류의 Data들을 모아 놓을 수 있는 최소한의 공간
- FK = 관계조건
- 기준 Table = 부모 / 기준을 기반으로 데이터를 쌓는 Table = 자식
- 부모 Table에는 PK를 만들어둠 / 자식 Table에는 부모의 PK와 같은 FK를 만들어둠 / 이것으로 관계를 걸 수 있음 / => 관계조건식
- PK만 있는 Table = 부모 Table
- PK = 고유한 특성 값

<<Oracle을 기준으로 데이터베이스>>
<SQL 용어>
- 관계형 데이터베이스(RDB)

<데이터베이스 객체>
- 데이터를 저장하거나 이와 상호작용하는 다른 정보를 저장
- table(테이블)
- row(행)
- colum(열)
- view(뷰)
- 저장 프로시져
- trigger(트리거)
- default(디폴트)
- rule(규칙)
- index

<사용자 생성>
- all_user = 사용자 정보 확인

<데이터 Type의 분류>
- VARCHAR2 = 가변 길이 문자열 저장
- CHAR = 고정 길이 문자열 저장
- NUMBER = 숫자 데이터를 저장
- DATE = 날짜 데이터형 

select
where
group by
having
order by




















